{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Arakawa makes it simple to build interactive reports in seconds using Python.</p> <p>Import Arakawa's Python library into your script or notebook and build reports programmatically by wrapping components such as:</p> <ul> <li>Pandas DataFrames</li> <li>Plots from Python visualization libraries such as Bokeh, Altair, Plotly, and Folium</li> <li>Markdown and text</li> <li>Files, such as images, PDFs, JSON data, etc.</li> <li>Interactive forms which run backend Python functions</li> </ul> <p>Arakawa reports are interactive and can also contain pages, tabs, drop downs, and more. Once created, reports can be exported as HTML, shared as standalone files, or embedded into your own application, where your viewers can interact with your data and visualizations.</p>"},{"location":"#get-started","title":"Get Started","text":"<p>Get up and running with our Quickstart, or dig deeper into the rest of the docs.</p>"},{"location":"installing-arakawa/","title":"Installing Arakawa","text":"<p>Arakawa's Python library and CLI can be installed using either <code>pip</code> or <code>conda</code> on macOS, Windows, or Linux. Arakawa supports Python 3.9 - 3.12.</p> <p>Info</p> <p>Instructions for installing Python can be found at https://wiki.python.org/moin/BeginnersGuide/Download.</p>"},{"location":"installing-arakawa/#pip","title":"Pip","text":"<p>If you use <code>pip</code>, you can install it with:</p> ShellJupyter <pre><code>pip install -U arakawa\n</code></pre> <pre><code>!pip install -U arakawa\n</code></pre>"},{"location":"installing-arakawa/#conda","title":"Conda","text":"<p>If you use <code>conda</code>, you can install it with:</p> ShellJupyter <pre><code>conda install -c conda-forge arakawa\n</code></pre> <pre><code>!conda install -c conda-forge arakawa\n</code></pre> <p>Warning</p> <p>Conda sometimes installs an older version of Arakawa. If you receive errors, please check the version and try running <code>conda update --all</code> or try in a new conda environment (<code>conda create -n ENV</code> and <code>conda activate ENV</code>)</p>"},{"location":"installing-arakawa/#upgrading","title":"Upgrading","text":""},{"location":"installing-arakawa/#upgrading-via-pip","title":"Upgrading Via Pip","text":"<p>If you installed Arakawa via pip, run the following command:</p> <pre><code>pip install -U arakawa\n</code></pre>"},{"location":"installing-arakawa/#upgrading-via-conda","title":"Upgrading Via Conda","text":"<p>If you installed <code>arakawa</code> via conda, run the following command, adding the <code>--all</code> flag if needed. As above, if you receive errors please try using a fresh conda environment.</p> <pre><code>conda update arakawa OR conda update --all\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":"<pre><code>import altair as alt\nimport arakawa as ar\nfrom vega_datasets import data\n</code></pre> <p>We've imported <code>arakawa</code>, the popular visualization library <code>altair</code>, and <code>vega_datasets</code> which contains some sample datasets.</p> <p>Let's load the Iris dataset and get a list of the features.</p> <pre><code>df = data.iris()\ncolumns = list(df.columns)\nprint(columns)\n</code></pre> <pre>\n<code>['sepalLength', 'sepalWidth', 'petalLength', 'petalWidth', 'species']\n</code>\n</pre> <pre><code>fig = (\n    alt.Chart(df)\n    .mark_point()\n    .encode(x=alt.X(\"sepalLength\", scale=alt.Scale(zero=False)),\n            y=alt.X(\"sepalWidth\", scale=alt.Scale(zero=False)),\n            color=\"species\")\n)\n\nview = ar.Select(ar.Plot(fig, label=\"Plot\"), ar.DataTable(df, label=\"Data\"))\nview\n</code></pre> <pre><code>ar.save_report(view, \"quickstart_report.html\", open=True)\n# or\nar.Report(view).save(\"quickstart_report.html\", open=True)\n</code></pre> <p>App saved to ./quickstart_report.html</p> <p>App saved to ./quickstart_report.html</p>"},{"location":"quickstart/#quickstart","title":"Quickstart","text":"<p>These instructions will help you create a report in &lt;1 minute. We will build a simple HTML report using Python based on the Iris dataset.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>First, install Arakawa using <code>pip</code> or <code>conda</code>. Check out our installation page for installation options.</p> <pre><code>pip3 install -U arakawa\n</code></pre>"},{"location":"quickstart/#setting-things-up","title":"Setting Things Up","text":""},{"location":"quickstart/#blocks","title":"Blocks","text":"<p>Your report is comprised of Blocks, which are Python objects that wrap around common objects such as datasets, plots, and other blocks. There are display blocks, such as Plot or DataTable, and layout blocks, such as Select and Group.</p> <p>Having loaded our DataFrame above and with knowledge of our column names, we first create a simple scatterplot using the Altair plotting library. </p> <p>We then build a simple set of blocks which presents two tabs: one with our plot, and one with our DataFrame.</p>"},{"location":"quickstart/#reports","title":"Reports","text":"<p>Once we have a view, we can save it as an HTML report to share.</p> <p>Let's save it as a report and open it in a new window.</p>"},{"location":"quickstart/#sharing-your-report","title":"Sharing Your Report","text":"<p>That's it! As Arakawa has created an HTML file, you can now share this Slack or email without deploying any code or configuring a backend server.</p>"},{"location":"blocks/control-blocks/","title":"Control Blocks","text":"<p>Control Blocks are for composing an HTML form with Compute layout block.</p> <p>Arakawa supports various control blocks.</p> <pre><code>ar.TextBox(\"text\")\n</code></pre> <pre><code>ar.NumberBox(\"number\")\n</code></pre> <pre><code>ar.RangeField(name=\"range\", min=0, max=100, step=10)\n</code></pre> <pre><code>ar.SwitchField(\"switch\")\n</code></pre> <pre><code>ar.FileField(\"file\")\n</code></pre> <pre><code>ar.DateTimeField(\"date-time\")\n</code></pre>"},{"location":"blocks/control-blocks/#api-references","title":"API References","text":"<p>Check out the API Reference to know details:</p> <ul> <li><code>Choices &amp; Tags</code></li> <li><code>Datetimes</code></li> <li><code>File</code></li> <li><code>Numbers</code></li> <li><code>Switch</code></li> <li><code>Texts</code></li> <li><code>Validation</code></li> </ul>"},{"location":"blocks/display-blocks/","title":"Display Blocks","text":"<p>The first category of blocks are Display Blocks, which take existing Python objects (such pandas DataFrames, plots, and Markdown) and display them.  For instance, Arakawa provides a <code>DataTable</code> block that takes a pandas <code>DataFrame</code>, and displays it as an interactive table in your report or app.</p> <p>Arakawa supports the following blocks.</p> <pre><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"A\": np.linspace(1, 10, 10)})\ndf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list(\"BCDE\"))], axis=1)\n\nar.Table(df.style.background_gradient(cmap=\"viridis\"))\n</code></pre> <p>Share large datasets complete with interactivity that enables sorting, filtering, and advanced analysis using SQL:</p> <pre><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(\n    {\n        \"A\": np.random.normal(-1, 1, 5000),\n        \"B\": np.random.normal(1, 2, 5000),\n    }\n)\n\nar.DataTable(df)\n</code></pre> <p>Or highlight key metrics with more than just plain text:</p> <pre><code>ar.Group(\n    ar.BigNumber(\n        heading=\"Percentage points\",\n        value=\"84%\",\n        change=\"2%\",\n        is_upward_change=True,\n    ),\n    ar.BigNumber(\n        heading=\"Percentage points\",\n        value=\"84%\",\n        change=\"2%\",\n        is_upward_change=False,\n    ),\n    ar.BigNumber(\n        heading=\"Points\",\n        value=\"1234\",\n        change=\"200\",\n        is_upward_change=True,\n    ),\n    ar.BigNumber(\n        heading=\"Points\",\n        value=\"1234\",\n        change=\"200\",\n        is_upward_change=False,\n    ),\n    columns=2,\n)\n</code></pre> <p>Check out Tables and data in the API Reference.</p> <pre><code>import altair as alt\nimport pandas as pd\nfrom vega_datasets import data as vega_data\n\ngap = pd.read_json(vega_data.gapminder.url)\n\nselect_year = alt.selection_point(\n    name=\"select\",\n    fields=[\"year\"],\n    value={\"year\": 1955},\n    bind=alt.binding_range(min=1955, max=2005, step=5),\n)\n\nalt_chart = (\n    alt.Chart(gap)\n    .mark_point(filled=True)\n    .encode(\n        alt.X(\"fertility\", scale=alt.Scale(zero=False)),\n        alt.Y(\"life_expect\", scale=alt.Scale(zero=False)),\n        alt.Size(\"pop:Q\"),\n        alt.Color(\"cluster:N\"),\n        alt.Order(\"pop:Q\", sort=\"descending\"),\n    )\n    .add_params(select_year)\n    .transform_filter(select_year)\n)\n\nar.Plot(alt_chart)\n</code></pre> <p>All the way to geographic plots with Folium:</p> <pre><code>import folium\n\nm = folium.Map(location=[45.5236, -122.6750])\n\nar.Plot(m)\n</code></pre> <p>Check out Plots and visualizations in the API Reference.</p> <pre><code>code = \"\"\"\nfunction foo(n) {\n  return foo(n + 1)\n}\n\"\"\"\n\nar.Code(code=code, language=\"javascript\")\n</code></pre> <p>Present a LaTeX formula, or HTML:</p> <pre><code>html = \"\"\"\n&lt;html&gt;\n&lt;style type=\"text/css\"&gt;\n        @keyframes example {\n            0%   {color: #EEE;}\n            25%  {color: #EC4899;}\n            50%  {color: #8B5CF6;}\n            100% {color: #EF4444;}\n        }\n        #container {\n            background: #1F2937;\n            padding: 10em;\n        }\n        h1 {\n            color:#eee;\n            animation-name: example;\n            animation-duration: 4s;\n            animation-iteration-count: infinite;\n        }\n    &lt;/style&gt;\n&lt;div id=\"container\"&gt;\n&lt;h1&gt; Welcome to my App &lt;/h1&gt;\n&lt;/div&gt;\n&lt;/html&gt;\n\"\"\"\n\nar.HTML(html)\n</code></pre> <p>Check out Text and HTML in the API Reference for further details and more examples.</p> <pre><code>ar.Media(file=\"./image.png\", name=\"Image1\", caption=\"Arakawa in action!\")\n</code></pre> <p>Or attach a file that your user can download:</p> <pre><code>data_path = \"./netflix_stock_data.csv\"\n\nar.Attachment(file=data_path)\n</code></pre> <p>Check out Media and embeds in the API Reference.</p>"},{"location":"blocks/display-blocks/#tables-and-data","title":"Tables And Data","text":"<p>These blocks present and highlight data.</p> <p>Take advantage of <code>pandas</code> and the <code>Styler</code> class for finer control over table presentation:</p>"},{"location":"blocks/display-blocks/#plots-and-visualizations","title":"Plots And Visualizations","text":"<p>Arakawa supports all major Python visualization libraries, from bubble charts with Altair:</p>"},{"location":"blocks/display-blocks/#text-and-html","title":"Text And HTML","text":"<p>Whether you need to embed markdown, a code block:</p>"},{"location":"blocks/display-blocks/#media-and-embeds","title":"Media And Embeds","text":"<p>There are often cases where you need to include an external image:</p>"},{"location":"blocks/display-blocks/#automatic-conversion","title":"Automatic Conversion","text":"<p>As well as explicitly specifying your block type (for instance, by using <code>ar.Plot</code>), Arakawa will try and choose the best block for your object if you pass it in directly.</p> <p>The defaults are as follows:</p> Object Type Arakawa Block pandas DataFrame <code>ar.Table</code> (up to 100 cells), <code>ar.DataTable</code> (over 100 cells) string <code>ar.Text</code> Altair <code>ar.Plot</code> Bokeh <code>ar.Plot</code> Folium <code>ar.Plot</code> Matplotlib / Seaborn <code>ar.Plot</code> Plotly <code>ar.Plot</code>"},{"location":"blocks/layout-blocks/","title":"Layout Blocks","text":"<p>Layout blocks take other blocks as parameters and lay them out. Interactive layout blocks (such as tabs and selects) don't require a backend server and can be used in HTML reports.</p> <pre><code>import altair as alt\nfrom vega_datasets import data\n\ndf = data.iris()\n\nplot_base = alt.Chart(df).mark_point().interactive()\n\nar.Group(\n    \"Iris analysis\",\n    ar.Select(\n       ar.DataTable(df, label='Data'),\n       ar.Group(\n           ar.Plot(plot_base.encode(x='sepalLength', y='sepalWidth', color='species')),\n           ar.Plot(plot_base.encode(x='petalLength', y='petalWidth', color='species')),\n           columns=2,\n           label='Plots'\n       )\n    )\n)\n</code></pre> <p>This includes columns:</p> <pre><code>ar.Group(\n    ar.BigNumber(heading=\"Left\", value=\"1234\"),\n    ar.BigNumber(heading=\"Middle\", value=\"4321\"),\n    ar.BigNumber(heading=\"Right\", value=\"2314\"),\n    columns=3,\n)\n</code></pre> <pre><code>ar.Select(\n    blocks=[\n        ar.Text(\"Hello World 1\", label=\"Page 1\"),\n        ar.Text(\"Hello World 2\", label=\"Page 2\"),\n        ar.Text(\"Hello World 3\", label=\"Page 3\"),\n    ]\n)\n</code></pre> <pre><code>ar.Group(\n    ar.Text(\"This is the left side of a two-column layout\"),\n    ar.Group(\n        ar.Text(\"This is the right side of a two-column layout\"),\n        ar.Text(\"Below we have three tabs with different content\"),\n        ar.Select(\n            blocks=[\n                ar.Text(\"Hello World 1\", label=\"Page 1\"),\n                ar.Text(\"Hello World 2\", label=\"Page 2\"),\n                ar.Text(\"Hello World 3\", label=\"Page 3\"),\n            ]\n        ),\n    ),\n    columns=2,\n)\n</code></pre> <pre><code>ar.Compute(\n    ar.TextBox(\"text\"),\n    ar.NumberBox(\"number\")\n)\n</code></pre>"},{"location":"blocks/layout-blocks/#group","title":"Group","text":""},{"location":"blocks/layout-blocks/#select","title":"Select","text":""},{"location":"blocks/layout-blocks/#nesting","title":"Nesting","text":"<p>Layout blocks can be arbitrarily nested, allowing you to create complex user interfaces.</p>"},{"location":"blocks/layout-blocks/#compute","title":"Compute","text":"<p>Compute block is for composing an HTML form with control blocks.</p>"},{"location":"blocks/layout-blocks/#available-blocks","title":"Available Blocks","text":"<p>Check out more layout block examples in the API Reference:</p> <ul> <li><code>ar.Group</code></li> <li><code>ar.Page</code></li> <li><code>ar.Select</code></li> <li><code>ar.Toggle</code></li> <li><code>ar.Compute</code></li> </ul>"},{"location":"blocks/overview/","title":"Overview","text":"<p>Reports are comprised of multiple Blocks, which wrap up Python objects, such as Pandas DataFrames, visualizations, and Markdown. Arakawa also includes interactive layout blocks to add tabs, pages, and selects to your reports.</p> <p>Blocks can be combined together and nested. For instance, you can pass multiple plots into a <code>Select</code> to provide an interactive dropdown. This makes it simple to assemble complex, reusable interfaces and reports.</p> <p>Tip</p> <p>You can think of blocks as similar to HTML Elements / Tags, but specialized on creating data-driven reports</p> <pre><code># Import libraries\nimport arakawa as ar\nimport altair as alt\nfrom vega_datasets import data\n\n# Load the data from vega_datasets\nsource = data.cars()\n\n# Create an interactive Altair chart\nplot1 = (\n    alt.Chart(source)\n    .mark_circle(size=60)\n    .encode(\n        x=\"Horsepower\",\n        y=\"Miles_per_Gallon\",\n        color=\"Origin\",\n        tooltip=[\"Name\", \"Origin\", \"Horsepower\", \"Miles_per_Gallon\"],\n    )\n    .interactive()\n)\n\nreport = ar.Blocks(\n    ar.Page(\n        title=\"Plots\",\n        blocks=[\n            ar.Formula(\"x^2 + y^2 = z^2\"),\n            ar.Group(\n                ar.BigNumber(heading=\"Number of percentage points\", value=\"84%\", change=\"2%\", is_upward_change=True),\n                ar.BigNumber(heading=\"Simple Statistic\", value=100),\n                columns=2,\n            ),\n            ar.Select(\n                ar.Plot(plot1, label=\"Chart\"),\n                ar.HTML(\n                    \"\"\"\n                    &lt;iframe allowfullscreen=\"\" class=\"giphy-embed\" frameborder=\"0\" height=\"480\" src=\"https://giphy.com/embed/7NoNw4pMNTvgc\" width=\"480\"&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=\"https://giphy.com/gifs/content-7NoNw4pMNTvgc\"&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;\n                    \"\"\",\n                    label=\"HTML + GIF\",\n                ),\n            ),\n        ],\n    ),\n    ar.Page(title=\"Data\", blocks=[ar.DataTable(source, label=\"Data\")]),\n)\n\nar.save_report(report, path='report.html')\n</code></pre> <p>App saved to ./report.html</p>"},{"location":"blocks/overview/#blocks","title":"Blocks","text":"<p>There are two main types of Blocks provided by default in Arakawa:</p> <ol> <li>Display Blocks display data and visualizations, such as a Plot (ar.Plot) or a DataTable (ar.DataTable). They take Python objects, such as Panda DataFrames, and automatically convert them into a component that can be viewed in your report.</li> <li>Layout Blocks can be used to layout other Blocks. For instance, <code>ar.Group</code> can group blocks together in columns, or <code>ar.Select</code> allows a user to select between multiple blocks. They take other Blocks as their input and lay them out to help build complex and visually informative layouts.</li> </ol>"},{"location":"blocks/overview/#example","title":"Example","text":"<p>Below is a simple example that demonstrates building up a collection of blocks, including BigNumber to display high-level data, a Plot block, and multiple tabs and columns.</p>"},{"location":"reference/reports/","title":"Reports","text":"<p>Once you have built up the blocks that make up your report, you can use the following methods to save it as a local report.</p> <pre><code>import arakawa as ar\n\nreport = ar.Report(ar.Text(\"Hello, world!\"))\nreport.save(\"report.html\")\n# or\nreport.stringify()\n</code></pre> <p>Alternatively, you can use the following functions to save or stringify a report or blocks.</p>"},{"location":"reference/reports/#arakawa.view.view_blocks.Report","title":"<code>Report</code>","text":"<p>App documents collate plots, text, tables, and files into an interactive document that can be analyzed and shared by users in their browser</p>"},{"location":"reference/reports/#arakawa.view.view_blocks.Report.save","title":"<code>save</code>","text":"<p>Save a report as an HTML file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>A file path to store the document.</p> required <code>open</code> <code>bool</code> <p>Open in your browser after creating. Default to False.</p> <code>False</code> <code>name</code> <code>str | None</code> <p>A name of a report. Optional. Uses path if not provided.</p> <code>None</code> <code>formatting</code> <code>Formatting | None</code> <p>Sets the basic app styling.</p> <code>None</code> <code>cdn_base</code> <code>str | None</code> <p>Base URL of CDN. Defaults to None.</p> <code>None</code> <code>standalone</code> <code>bool</code> <p>Whether or not to inline assets in an HTML instead of loading via CDN or not. Defaults to False.</p> <code>False</code>"},{"location":"reference/reports/#arakawa.view.view_blocks.Report.stringify","title":"<code>stringify</code>","text":"<p>Stringify a report as an HTML string.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>A name of a report. Optional. Uses path if not provided.</p> <code>None</code> <code>formatting</code> <code>Formatting | None</code> <p>Sets the basic app styling.</p> <code>None</code> <code>cdn_base</code> <code>str | None</code> <p>Base URL of CDN. Defaults to None.</p> <code>None</code> <code>resizable</code> <code>bool</code> <p>Wether or not to allow make an iframed report resizable or not. Defaults to True.</p> <code>True</code> <code>standalone</code> <code>bool</code> <p>Whether or not to inline assets in an HTML instead of loading via CDN or not. Defaults to False.</p> <code>False</code>"},{"location":"reference/reports/#arakawa.processors.api.save_report","title":"<code>save_report</code>","text":"<p>Save a report as an HTML file.</p> <p>Parameters:</p> Name Type Description Default <code>blocks</code> <code>BlocksT</code> <p>A <code>Blocks</code> object or a list of Blocks.</p> required <code>path</code> <code>str</code> <p>A file path to store the document.</p> required <code>open</code> <code>bool</code> <p>Open in your browser after creating. Default to False.</p> <code>False</code> <code>name</code> <code>str | None</code> <p>A name of a report. Optional. Uses path if not provided.</p> <code>None</code> <code>formatting</code> <code>Formatting | None</code> <p>Sets the basic app styling.</p> <code>None</code> <code>cdn_base</code> <code>str | None</code> <p>Base URL of CDN. Defaults to None.</p> <code>None</code> <code>standalone</code> <code>bool</code> <p>Whether or not to inline assets in an HTML instead of loading via CDN or not. Defaults to False.</p> <code>False</code>"},{"location":"reference/reports/#arakawa.processors.api.stringify_report","title":"<code>stringify_report</code>","text":"<p>Stringify a report as an HTML string.</p> <p>Parameters:</p> Name Type Description Default <code>blocks</code> <code>BlocksT</code> <p>A <code>Blocks</code> object or a list of Blocks.</p> required <code>name</code> <code>str | None</code> <p>A name of a report. Optional. Uses path if not provided.</p> <code>None</code> <code>formatting</code> <code>Formatting | None</code> <p>Sets the basic app styling.</p> <code>None</code> <code>cdn_base</code> <code>str | None</code> <p>Base URL of CDN. Defaults to None.</p> <code>None</code> <code>resizable</code> <code>bool</code> <p>Wether or not to allow make an iframed report resizable or not. Defaults to True.</p> <code>True</code> <code>standalone</code> <code>bool</code> <p>Whether or not to inline assets in an HTML instead of loading via CDN or not. Defaults to False.</p> <code>False</code>"},{"location":"reference/reports/#standalone-mode","title":"Standalone Mode","text":"<p>A report uses CDN (jsDelivr) to load assets by default.</p> <p>As an alternative, you can use standalone mode which inlines assets in a report.</p> <pre><code>report.save(\"report.html\", standalone=True)\n# or\nreport.stringify(standalone=True)\n</code></pre> <p>Note</p> <p>Inlining assets significantly increases the size of a report. The size can exceed 20MB.</p>"},{"location":"reference/reports/#in-house-cdn","title":"In-House CDN","text":"<p>There is an option to use an in-house CDN by configuring CDN URL via <code>AR_CDN_BASE</code> environment variable (defaults to <code>https://cdn.jsdelivr.net/npm/arakawa@{VERSION)/dist</code>).</p> <ul> <li>Download frontend assets via jsDelivr or NPM:<ul> <li>https://www.jsdelivr.com/package/npm/arakawa</li> <li>https://www.npmjs.com/package/arakawa (<code>npm pack arakawa</code> to download)</li> </ul> </li> <li>Unpack it and upload files into your CDN (e.g. S3 or S3-like object storage)</li> </ul> <pre><code>AR_CDN_BASE=http://... python report.py\n</code></pre>"},{"location":"reference/control-blocks/choices/","title":"Choices & Tags","text":"<pre><code>ar.SwitchField(\"switch\")\n</code></pre> <pre><code>ar.ChoiceField(\"choice\", [\"a\", \"b\"])\n</code></pre> <pre><code>ar.MultiChoiceField(\"multi-choice\", [\"a\", \"b\"], [\"a\", \"b\", \"c\"])\n</code></pre> <pre><code>ar.TagsField(\"tags\", [\"a\", \"b\"])\n</code></pre>"},{"location":"reference/control-blocks/choices/#arakawa.SwitchField","title":"<code>SwitchField</code>","text":"<p>SwitchField allows you to add a checkbox type input.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A name.</p> required <code>help</code> <code>str | None</code> <p>A help text. Defaults to None.</p> <code>None</code> <code>initial</code> <code>bool | None</code> <p>An initial value. Defaults to None.</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label. Defaults to None.</p> <code>None</code> <code>validation</code> <code>str | None</code> <p>A formkit validation in addition to required. Defaults to None.</p> <code>None</code>"},{"location":"reference/control-blocks/choices/#arakawa.ChoiceField","title":"<code>ChoiceField</code>","text":"<p>ChoiceField allows you to add a select type input.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A name.</p> required <code>options</code> <code>list[str]</code> <p>Options.</p> required <code>help</code> <code>str | None</code> <p>A help text. Defaults to None.</p> <code>None</code> <code>initial</code> <code>str | None</code> <p>An initial value. Defaults to None.</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label. Defaults to None.</p> <code>None</code> <code>required</code> <code>bool | None</code> <p>Whether it's required or not. Defaults to None.</p> <code>None</code> <code>validation</code> <code>str | None</code> <p>A formkit validation in addition to required. Defaults to None.</p> <code>None</code>"},{"location":"reference/control-blocks/choices/#arakawa.MultiChoiceField","title":"<code>MultiChoiceField</code>","text":"<p>MultiChoiceField allows you to have a multiple select type input.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A name.</p> required <code>initial</code> <code>list[str]</code> <p>An initial value.</p> required <code>options</code> <code>list[str]</code> <p>Options.</p> required <code>help</code> <code>str | None</code> <p>A help text. Defaults to None.</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label. Defaults to None.</p> <code>None</code> <code>required</code> <code>bool | None</code> <p>Whether it's required or not. Defaults to None.</p> <code>None</code> <code>validation</code> <code>str | None</code> <p>A formkit validation in addition to required. Defaults to None.</p> <code>None</code>"},{"location":"reference/control-blocks/choices/#arakawa.TagsField","title":"<code>TagsField</code>","text":"<p>TagsField allows you to add a multi select type input along with the free form input.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A name.</p> required <code>initial</code> <code>list[str]</code> <p>An initial value.</p> required <code>help</code> <code>str | None</code> <p>A help text. Defaults to None.</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label. Defaults to None.</p> <code>None</code> <code>required</code> <code>bool | None</code> <p>Whether it's required or not. Defaults to None.</p> <code>None</code> <code>validation</code> <code>str | None</code> <p>A formkit validation in addition to required. Defaults to None.</p> <code>None</code>"},{"location":"reference/control-blocks/color/","title":"Color","text":"<pre><code>ar.ColorField(\"color\")\n</code></pre>"},{"location":"reference/control-blocks/color/#arakawa.ColorField","title":"<code>ColorField</code>","text":"<p>ColorField allows you to add a color picker.</p>"},{"location":"reference/control-blocks/datetimes/","title":"DateTimes","text":"<pre><code>ar.DateTimeField(\"date-time\")\n</code></pre> <pre><code>ar.DateField(\"date\")\n</code></pre> <pre><code>ar.TimeField(\"time\")\n</code></pre>"},{"location":"reference/control-blocks/datetimes/#arakawa.DateTimeField","title":"<code>DateTimeField</code>","text":"<p>DateTimeField allows you to add a datetime type input.</p>"},{"location":"reference/control-blocks/datetimes/#arakawa.DateField","title":"<code>DateField</code>","text":"<p>DateField allows you to add a date type input.</p>"},{"location":"reference/control-blocks/datetimes/#arakawa.TimeField","title":"<code>TimeField</code>","text":"<p>TimeField allows you to add a time type input.</p>"},{"location":"reference/control-blocks/file/","title":"File","text":"<pre><code>ar.FileField(\"file\")\n</code></pre>"},{"location":"reference/control-blocks/file/#arakawa.FileField","title":"<code>FileField</code>","text":"<p>FileField allows you to add a file type input.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A name.</p> required <code>help</code> <code>str | None</code> <p>A help text. Defaults to None.</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label. Defaults to None.</p> <code>None</code> <code>required</code> <code>bool | None</code> <p>Whether it's required or not. Defaults to None.</p> <code>None</code> <code>validation</code> <code>str | None</code> <p>A formkit validation in addition to required. Defaults to None.</p> <code>None</code> <code>accept</code> <code>str | None</code> <p>An accept value. Defaults to None.</p> <code>None</code>"},{"location":"reference/control-blocks/numbers/","title":"Numbers","text":"<pre><code>ar.NumberBox(\"number\")\n</code></pre> <pre><code>ar.RangeField(name=\"range\", min=0, max=100, step=10)\n</code></pre>"},{"location":"reference/control-blocks/numbers/#arakawa.NumberBox","title":"<code>NumberBox</code>","text":"<p>NumberBox allows you to add a number type input.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A name.</p> required <code>help</code> <code>str | None</code> <p>A help text. Defaults to None.</p> <code>None</code> <code>initial</code> <code>int | float | None</code> <p>An initial value. Defaults to None.</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label. Defaults to None.</p> <code>None</code> <code>required</code> <code>bool | None</code> <p>Whether it's required or not. Defaults to None.</p> <code>None</code> <code>validation</code> <code>str | None</code> <p>A formkit validation in addition to required. Defaults to None.</p> <code>None</code>"},{"location":"reference/control-blocks/numbers/#arakawa.RangeField","title":"<code>RangeField</code>","text":"<p>RangeField allows you to add a range type input.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name.</p> required <code>min</code> <code>int | float</code> <p>A min value.</p> required <code>max</code> <code>int | float</code> <p>A max value.</p> required <code>step</code> <code>int | float</code> <p>A step value.</p> required <code>help</code> <code>str | None</code> <p>A help text. Defaults to None.</p> <code>None</code> <code>initial</code> <code>int | float | None</code> <p>An initial value. Defaults to None.</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label. Defaults to None.</p> <code>None</code> <code>validation</code> <code>str | None</code> <p>A formkit validation in addition to required. Defaults to None.</p> <code>None</code>"},{"location":"reference/control-blocks/texts/","title":"Texts","text":"<pre><code>ar.TextBox(\"text\")\n</code></pre> <pre><code>ar.EmailField(\"email\")\n</code></pre> <pre><code>ar.HiddenField(\"hidden\", initial=\"foo\")\n</code></pre> <pre><code>ar.PasswordField(\"password\")\n</code></pre> <pre><code>ar.SearchField(\"search\")\n</code></pre> <pre><code>ar.TelephoneField(\"tel\")\n</code></pre> <pre><code>ar.URLField(\"url\")\n</code></pre>"},{"location":"reference/control-blocks/texts/#arakawa.TextBox","title":"<code>TextBox</code>","text":"<p>TextBox allows you to add a text type input.</p>"},{"location":"reference/control-blocks/texts/#arakawa.EmailField","title":"<code>EmailField</code>","text":"<p>EmailField allows you to add an email type input.</p>"},{"location":"reference/control-blocks/texts/#arakawa.HiddenField","title":"<code>HiddenField</code>","text":"<p>HiddenField allows you to add a hidden type input.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A name.</p> required <code>initial</code> <code>str</code> <p>An initial value.</p> required"},{"location":"reference/control-blocks/texts/#arakawa.PasswordField","title":"<code>PasswordField</code>","text":"<p>PasswordField allows you to add a password type input.</p>"},{"location":"reference/control-blocks/texts/#arakawa.SearchField","title":"<code>SearchField</code>","text":"<p>SearchField allows you to add a search type input.</p>"},{"location":"reference/control-blocks/texts/#arakawa.TelephoneField","title":"<code>TelephoneField</code>","text":"<p>TelephoneField allows you to add a tel type input.</p>"},{"location":"reference/control-blocks/texts/#arakawa.URLField","title":"<code>URLField</code>","text":"<p>URLField allows you to add a url type input.</p>"},{"location":"reference/control-blocks/validation/","title":"Validation","text":"<pre><code>import arakawa as ar\n</code></pre> <p>Control blocks are powered by Formkit and most of blocks can have a string style <code>validation</code>.</p> <ul> <li>https://formkit.com/essentials/validation</li> </ul> <pre><code>ar.TextBox(\"text\", validation=\"number|between:20,50\", help=\"Enter a number between 20 and 50\")\n</code></pre> <p><code>required</code> is using the Formkit validation under the hood and <code>validation</code> will be combined with it.</p> <pre><code>ar.TextBox(\"text\", required=True, validation=\"number|between:20,50\", help=\"Enter a number between 20 and 50\")\n</code></pre> <p>Info</p> <p>The above input has <code>required|number|between:20,50</code> validation.</p>"},{"location":"reference/display-blocks/data/","title":"Tables & Data","text":"<pre><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(\n    {\n        \"A\": np.random.normal(-1, 1, 5),\n        \"B\": np.random.normal(1, 2, 5),\n    }\n)\n\nar.Table(df)\n</code></pre> <p>If your DataFrame includes DataFrame Styles, these will be included in your app. DataFrame styles allow you create custom formatted tables; for instance, to show trends, highlight cells, add bar charts, or display correlations.</p> <pre><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"A\": np.linspace(1, 10, 10)})\ndf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list(\"BCDE\"))], axis=1)\n\nar.Table(df.style.background_gradient(cmap=\"viridis\"))\n</code></pre> <pre><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(\n    {\n        \"A\": np.random.normal(-1, 1, 5000),\n        \"B\": np.random.normal(1, 2, 5000),\n    }\n)\n\nar.DataTable(df)\n</code></pre> <pre><code>ar.BigNumber(heading=\"Simple Statistic\", value=100)\n</code></pre> <pre><code>ar.Group(\n    ar.BigNumber(\n        heading=\"Percentage points\",\n        value=\"84%\",\n        change=\"2%\",\n        is_upward_change=True,\n    ),\n    ar.BigNumber(\n        heading=\"Percentage points\",\n        value=\"84%\",\n        change=\"2%\",\n        is_upward_change=False,\n    ),\n    ar.BigNumber(\n        heading=\"Points\",\n        value=\"1234\",\n        change=\"200\",\n        is_upward_change=True,\n    ),\n    ar.BigNumber(\n        heading=\"Points\",\n        value=\"1234\",\n        change=\"200\",\n        is_upward_change=False,\n    ),\n    columns=2,\n)\n</code></pre>"},{"location":"reference/display-blocks/data/#arakawa.Table","title":"<code>Table</code>","text":"<p>Table blocks store the contents of a DataFrame as a HTML <code>table</code> whose style can be customized using pandas' <code>Styler</code> API.</p> <p>Tip</p> <p><code>Table</code> is the best option for displaying multidimensional DataFrames, as <code>DataTable</code> will flatten your data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame | Styler</code> <p>A pandas <code>Styler</code> instance or dataframe to generate the table from</p> required <code>caption</code> <code>str | None</code> <p>A caption to display below the table (optional)</p> <code>None</code> <code>name</code> <code>str | None</code> <p>A unique name for the block to reference when adding text or embedding (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code>"},{"location":"reference/display-blocks/data/#simple-table-from-dataframe","title":"Simple Table From DataFrame","text":""},{"location":"reference/display-blocks/data/#styled-table-from-dataframe","title":"Styled Table From DataFrame","text":""},{"location":"reference/display-blocks/data/#arakawa.DataTable","title":"<code>DataTable</code>","text":"<p>The DataTable block takes a pandas DataFrame and renders an interactive, sortable, searchable table in your app, along with advanced analysis options such as exploring data through SandDance.</p> <p>It supports large datasets and viewers can also download the table from the website as a CSV or Excel file.</p> <p>Tip</p> <p><code>Table</code> is the best option for displaying multidimensional DataFrames, as <code>DataTable</code> will flatten your data.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>A pandas dataframe to attach to the report</p> required <code>caption</code> <code>str | None</code> <p>A caption to display below the plot (optional)</p> <code>None</code> <code>name</code> <code>str | None</code> <p>A unique name for the block to reference when adding text or embedding (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code>"},{"location":"reference/display-blocks/data/#simple-datatable-from-dataframe","title":"Simple DataTable From DataFrame","text":""},{"location":"reference/display-blocks/data/#running-queries-on-datatable","title":"Running Queries on DataTable","text":"<p>You can run SQL queries on your datatable if you need more advanced filtering &amp; calculations. In the previous example, if we wanted to show only the rows which had a value A &gt; 0.5, we would write the following (note that <code>$table</code> is the builtin table name and cannot be changed):</p> <pre><code>SELECT * FROM $table\nWHERE A &amp;gt; 0.5\n</code></pre>"},{"location":"reference/display-blocks/data/#arakawa.BigNumber","title":"<code>BigNumber</code>","text":"<p>A single number or change can often be the most important thing in an app.</p> <p>The <code>BigNumber</code>block allows you to present KPIs, changes, and statistics in a friendly way to your viewers.</p> <p>You can optionally set intent, and pass in numbers or text.</p> <p>Parameters:</p> Name Type Description Default <code>heading</code> <code>str</code> <p>A title that gives context to the displayed number</p> required <code>value</code> <code>NumberValue</code> <p>The value of the number</p> required <code>prev_value</code> <code>NumberValue | None</code> <p>The previous value to display as comparison (optional)</p> <code>None</code> <code>change</code> <code>NumberValue | None</code> <p>The amount changed between the value and previous value (optional)</p> <code>None</code> <code>is_positive_intent</code> <code>bool | None</code> <p>Displays the change on a green background if <code>True</code>, and red otherwise. Follows <code>is_upward_change</code> if not set (optional)</p> <code>None</code> <code>is_upward_change</code> <code>bool | None</code> <p>Whether the change is upward or downward (required when <code>change</code> is set)</p> <code>None</code> <code>name</code> <code>str | None</code> <p>A unique name for the block to reference when adding text or embedding (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code>"},{"location":"reference/display-blocks/data/#simple-bignumber","title":"Simple BigNumber","text":""},{"location":"reference/display-blocks/data/#bignumber-with-change-indicators","title":"BigNumber With Change Indicators","text":""},{"location":"reference/display-blocks/embeds/","title":"Media & Embeds","text":"<pre><code>ar.Media(file=\"./image.png\", name=\"Image1\", caption=\"Arakawa in action!\")\n</code></pre> <pre><code>ar.Embed(url='https://www.youtube.com/watch?v=_KS_yZBI71s&amp;amp;t')\n</code></pre> <p>You don't need to use this block for simple embeds, e.g. GIFs. For those, just use Markdown syntax i.e. <code>![](https://my-example-gif.gif)</code></p> <pre><code>data_path = \"./netflix_stock_data.csv\"\n\nar.Attachment(file=data_path)\n</code></pre> <pre><code>vehicle_dict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\n\nar.Attachment(vehicle_dict, name=\"vehicle_dict\")\n</code></pre> <pre><code>data_path = \"./netflix_stock_data.csv\"\n\nvehicle_dict = {\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964}\n\nar.Group(\n    ar.Attachment(file=data_path), ar.Attachment(vehicle_dict, name=\"vehicle_dict\")\n)\n</code></pre>"},{"location":"reference/display-blocks/embeds/#arakawa.Media","title":"<code>Media</code>","text":"<p>The Media block allows you to include images, GIFs, video and audio in your apps. If the file is in a supported format, it will be displayed inline in your app.</p> <p>To include an image, you can use <code>ar.Media</code> and pass the path.</p> <p>Note</p> <p>Supported video, audio and image formats depend on the browser used to view the report. MP3, MP4, and all common image formats are generally supported by modern browsers</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>NPath</code> <p>A ath to a file to attach to the report (e.g. a JPEG image)</p> required <code>name</code> <code>str | None</code> <p>A unique name for the block to reference when adding text or embedding (optional)</p> <code>None</code> <code>caption</code> <code>str | None</code> <p>A caption to display below the file (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code>"},{"location":"reference/display-blocks/embeds/#simple-image-embed","title":"Simple Image Embed","text":"<p>In the following example, Arakawa will display images in your app for viewers and allow users to download them.</p>"},{"location":"reference/display-blocks/embeds/#arakawa.Embed","title":"<code>Embed</code>","text":"<p>The Embed block lets you embed content from other platforms e.g. Youtube, Spotify.</p> <p>Tip</p> <p>If you're trying to embed an <code>iframe</code>, you can wrap it in an <code>HTML</code> block.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>A URL of the resource to be embedded</p> required <code>width</code> <code>int</code> <p>A width of the embedded object (optional)</p> <code>960</code> <code>height</code> <code>int</code> <p>A height of the embedded object (optional)</p> <code>540</code> <code>name</code> <code>str | None</code> <p>A unique name for the block to reference when adding text or embedding (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code>"},{"location":"reference/display-blocks/embeds/#simple-youtube-embed","title":"Simple YouTube Embed","text":""},{"location":"reference/display-blocks/embeds/#arakawa.Attachment","title":"<code>Attachment</code>","text":"<p>If you want to include static files like PDFs or Excel docs in your app, use the <code>ar.Attachment</code> block.</p> <p>You can also pass in a Python object directly. Once you upload the app, your users will be able to explore and download these attachments.</p> <p>Tip</p> <p>To attach streamable / viewable video, audio or images, use the <code>ar.Media</code> block instead</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>A python object to attach to the report (e.g. a dictionary)</p> <code>None</code> <code>file</code> <code>NPath | None</code> <p>A path to a file to attach to the report (e.g. a csv file)</p> <code>None</code> <code>filename</code> <code>str | None</code> <p>A name to be used when downloading the file (optional)</p> <code>None</code> <code>caption</code> <code>str | None</code> <p>A caption to display below the file (optional)</p> <code>None</code> <code>name</code> <code>str | None</code> <p>A unique name for the block to reference when adding text or embedding (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code> <p>Note</p> <p>Either <code>data</code> or <code>file</code> must be provided</p>"},{"location":"reference/display-blocks/embeds/#simple-attachment","title":"Simple Attachment","text":""},{"location":"reference/display-blocks/embeds/#python-object-attachment","title":"Python Object Attachment","text":""},{"location":"reference/display-blocks/embeds/#multiple-attachments","title":"Multiple Attachments","text":""},{"location":"reference/display-blocks/plots/","title":"Plots","text":"<p>Arakawa currently supports the following libraries:</p> Library Site / Docs Altair https://altair-viz.github.io/ Matplotlib / Seaborn https://matplotlib.org/ / https://seaborn.pydata.org/ Bokeh https://bokeh.org/ Plotly https://plotly.com/python/ Folium https://python-visualization.github.io/folium/ <p>If you're using another visualization library e.g. Pyvis for networks, try saving your chart as a local HTML file and wrapping that in a ar.HTML block.</p> <pre><code>import altair as alt\nimport pandas as pd\nfrom vega_datasets import data as vega_data\n\ngap = pd.read_json(vega_data.gapminder.url)\n\nselect_year = alt.selection_point(\n    name=\"select\",\n    fields=[\"year\"],\n    value={\"year\": 1955},\n    bind=alt.binding_range(min=1955, max=2005, step=5),\n)\n\nalt_chart = (\n    alt.Chart(gap)\n    .mark_point(filled=True)\n    .encode(\n        alt.X(\"fertility\", scale=alt.Scale(zero=False)),\n        alt.Y(\"life_expect\", scale=alt.Scale(zero=False)),\n        alt.Size(\"pop:Q\"),\n        alt.Color(\"cluster:N\"),\n        alt.Order(\"pop:Q\", sort=\"descending\"),\n    )\n    .add_params(select_year)\n    .transform_filter(select_year)\n)\n\nar.Plot(alt_chart)\n</code></pre> <pre><code>from bokeh.plotting import figure\nfrom bokeh.sampledata.iris import flowers\n\ncolormap = {\"setosa\": \"red\", \"versicolor\": \"green\", \"virginica\": \"blue\"}\ncolors = [colormap[x] for x in flowers[\"species\"]]\n\nbokeh_chart = figure(title=\"Iris Morphology\")\nbokeh_chart.xaxis.axis_label = \"Petal Length\"\nbokeh_chart.yaxis.axis_label = \"Petal Width\"\n\nbokeh_chart.circle(\n    flowers[\"petal_length\"],\n    flowers[\"petal_width\"],\n    color=colors,\n    fill_alpha=0.2,\n    size=10,\n)\n\nar.Plot(bokeh_chart)\n</code></pre> <pre>\n<code>BokehDeprecationWarning: 'circle() method with size value' was deprecated in Bokeh 3.4.0 and will be removed, use 'scatter(size=...) instead' instead.\n</code>\n</pre> <pre><code>import matplotlib.pyplot as plt\nimport pandas as pd\nfrom vega_datasets import data as vega_data\n\ngap = pd.read_json(vega_data.gapminder.url)\nfig = gap.plot.scatter(x=\"life_expect\", y=\"fertility\")\n\n\nar.Plot(fig)\n</code></pre> <p>Info</p> <p>You can pass either a <code>matplotlib</code> <code>Figure</code> or <code>Axes</code> object to <code>ar.Plot</code>,  you can obtain the current global figure from <code>matplotlib</code> by running <code>plt.gcf()</code></p> <pre><code>import plotly.express as px\n\ndf = px.data.gapminder()\n\nplotly_chart = px.scatter(\n    df.query(\"year==2007\"),\n    x=\"gdpPercap\",\n    y=\"lifeExp\",\n    size=\"pop\",\n    color=\"continent\",\n    hover_name=\"country\",\n    log_x=True,\n    size_max=60,\n)\n\nar.Plot(plotly_chart)\n</code></pre> <pre><code>import folium\n\nm = folium.Map(location=[45.5236, -122.6750])\n\nar.Plot(m)\n</code></pre>"},{"location":"reference/display-blocks/plots/#plots","title":"Plots","text":""},{"location":"reference/display-blocks/plots/#arakawa.Plot","title":"<code>Plot</code>","text":"<p>Arakawa supports all major Python visualization libraries, allowing you to add interactive plots and visualizations to your app.</p> <p>The <code>ar.Plot</code> block takes a plot object from one of the supported Python visualization libraries and renders it in your app.</p> <p>Info</p> <p>Arakawa will automatically wrap your visualization or plot in a <code>ar.Plot</code> block if you pass it into your app directly.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>A <code>plot</code> object to attach</p> required <code>caption</code> <code>str | None</code> <p>A caption to display below the plot (optional)</p> <code>None</code> <code>responsive</code> <code>bool</code> <p>Whether the plot should automatically be resized to fit, set to False if your plot looks odd (optional, default: True)</p> <code>True</code> <code>scale</code> <code>float</code> <p>Set the scaling factor for the plt (optional, default = 1.0)</p> <code>1.0</code> <code>name</code> <code>str | None</code> <p>A unique name for the block to reference when adding text or embedding (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code>"},{"location":"reference/display-blocks/plots/#altair","title":"Altair","text":"<p>Altair is a declarative statistical visualization library for Python, based on Vega and Vega-Lite. Altair\u2019s API is simple, friendly and consistent and built on top of the powerful Vega-Lite visualization grammar. This elegant simplicity produces beautiful and effective visualizations with a minimal amount of code.</p> <p>To get started using Altair to make your visualizations, begin with Altair's Documentation</p>"},{"location":"reference/display-blocks/plots/#bokeh","title":"Bokeh","text":"<p>Bokeh is an interactive visualization library which provides elegant, concise construction of versatile graphics, and affords high-performance interactivity over large datasets. </p> <p>To get started using Bokeh to make your visualizations, begin with Bokeh's User Guide.</p>"},{"location":"reference/display-blocks/plots/#matplotlib","title":"Matplotlib","text":"<p>Matplotlib is the original Python visualization library, often supported and used with Jupyter Notebooks. Matplotlib plots are not interactive in Datapane apps, but are saved as SVGs so can be viewed at high fidelity.</p> <p>Higher-level matplotlib libraries such as Seaborn are also supported, and can be used in a similar way to the matplotlib example below,</p>"},{"location":"reference/display-blocks/plots/#plotly","title":"Plotly","text":"<p>Plotly's Python graphing library makes interactive, publication-quality graphs.</p>"},{"location":"reference/display-blocks/plots/#folium","title":"Folium","text":"<p>Folium makes it easy to visualize data that\u2019s been manipulated in Python on an interactive leaflet map. It enables both the binding of data to a map for <code>choropleth</code> visualizations as well as passing rich vector/raster/HTML visualizations as markers on the map.</p> <p>The library has a number of built-in tilesets from OpenStreetMap, Mapbox, and Stamen, and supports custom tilesets with Mapbox or Cloudmade API keys.</p>"},{"location":"reference/display-blocks/text/","title":"Text & HTML","text":"<pre><code>ar.Text(\"__My awesome markdown__\")\n</code></pre> <pre><code>md = \"\"\"Quas *diva coeperat usum*; suisque, ab alii, prato. Et cornua frontes puerum,\nreferam vocassent **umeris**. Dies nec suorum alis adstitit, *temeraria*,\nanhelis aliis lacunabant quoque adhuc spissatus illum refugam perterrita in\nsonus. Facturus ad montes victima fluctus undae Zancle et nulli; frigida me.\nRegno memini concedant argento Aiacis terga, foribusque audit Persephone\nserieque, obsidis cupidine qualibet Exadius.\n\n```python\nutf_torrent_flash = -1;\nurlUpnp -= leakWebE - dslam;\nskinCdLdap += sessionCyberspace;\nvar ascii = address - software_compile;\nwebFlaming(cable, pathIllegalHtml);```\n\n## Quo exul exsecrere cuique non alti caerulaque\n\n*Optatae o*! Quo et callida et caeleste amorem: nocet recentibus causamque.\n\n- Voce adduntque\n- Divesque quam exstinctum revulsus\n- Et utrique eunti\n- Vos tantum quercum fervet et nec\n- Eris pennis maneas quam\n\"\"\"\n\nar.Text(md)\n</code></pre> <pre><code>import seaborn as sns\nimport altair as alt\n\nmd = \"\"\"\nFor example, if we want to visualize the number of people in each class within the interval we select a point chart between age and fare, we could do something like this.\n\n{{plot}}\n\nAltair allows you to create some extremely interactive plots which do on-the-fly calculations \u2014 without even requiring a running Python server!\n\"\"\"\n\ntitanic = sns.load_dataset(\"titanic\")\n\npoints = (\n    alt.Chart(titanic)\n    .mark_point()\n    .encode(\n        x=\"age:Q\",\n        color=\"class:N\",\n        y=\"fare:Q\",\n    )\n    .interactive()\n    .properties(width=\"container\")\n)\n\nar.Text(md).format(plot=points)\n</code></pre> <p>Alternatively, you can write your article or post in your favourite markdown editor, and pass it in as a file.</p> <pre><code>ar.Text(file=\"./my_blogpost.md\").format(plot=points)\n</code></pre> <pre><code>code = \"\"\"\nfunction foo(n) {\n  return foo(n + 1)\n}\n\"\"\"\n\nar.Code(code=code, language=\"javascript\")\n</code></pre> <pre><code>ar.Formula(r\"\\frac{1}{\\sqrt{x^2 + 1}}\")\n</code></pre> <pre><code>html = \"\"\"\n&lt;html&gt;\n&lt;style type=\"text/css\"&gt;\n        @keyframes example {\n            0%   {color: #EEE;}\n            25%  {color: #EC4899;}\n            50%  {color: #8B5CF6;}\n            100% {color: #EF4444;}\n        }\n        #container {\n            background: #1F2937;\n            padding: 10em;\n        }\n        h1 {\n            color:#eee;\n            animation-name: example;\n            animation-duration: 4s;\n            animation-iteration-count: infinite;\n        }\n    &lt;/style&gt;\n&lt;div id=\"container\"&gt;\n&lt;h1&gt; Welcome to my App &lt;/h1&gt;\n&lt;/div&gt;\n&lt;/html&gt;\n\"\"\"\n\nar.HTML(html)\n</code></pre>"},{"location":"reference/display-blocks/text/#arakawa.Text","title":"<code>Text</code>","text":"<p>You can add short or long-form Markdown content to your app with the <code>Text</code> block.</p> <p>Info</p> <p>Markdown is a lightweight markup language that allows you to include formatted text in your app, and can be accessed through <code>ar.Text</code>, or by passing in a string directly. </p> <p>Check here for more information on how to format your text with markdown.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str | None</code> <p>A markdown formatted text, use triple-quotes, (<code>\"\"\"# My Title\"\"\"</code>) to create multi-line markdown text</p> <code>None</code> <code>file</code> <code>NPath | None</code> <p>A path to a file containing markdown text</p> <code>None</code> <code>name</code> <code>str | None</code> <p>A unique name for the block to reference when adding text or embedding (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code> <p>Note</p> <p>File encodings are auto-detected, if this fails please read the file manually with an explicit encoding and use the text parameter on ar.Attachment</p>"},{"location":"reference/display-blocks/text/#simple-text-from-markdown","title":"Simple Text From Markdown","text":""},{"location":"reference/display-blocks/text/#multi-line-text","title":"Multi-line Text","text":"<p>To include multi-line text and formatting the words, use triple-quoted string, e.g. <code>\"\"\"Some words\"\"\"</code></p>"},{"location":"reference/display-blocks/text/#text-heavy-apps","title":"Text-heavy Apps","text":"<p>If your app is text-heavy (such as an blogpost) and it contains multiple other blocks, creating a list of strings and blocks in Python can be cumbersome. To solve this, Arakawa provides a <code>format</code> option, which allows you to write a single block of Markdown (either in your app, or in a separate file), and intersperse it with other blocks.</p> <p>To do this, use double braces to specify where you want your other blocks to appear throughout your text.</p>"},{"location":"reference/display-blocks/text/#text-from-file","title":"Text From File","text":""},{"location":"reference/display-blocks/text/#arakawa.Code","title":"<code>Code</code>","text":"<p>The code block allows you to embed syntax-highlighted source code into your app.</p> <p>Note</p> <p>This block currently supports Python and JavaScript.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>A source code</p> required <code>language</code> <code>str</code> <p>A language of the code, most common languages are supported (optional - defaults to Python)</p> <code>'python'</code> <code>caption</code> <code>str | None</code> <p>A caption to display below the Code (optional)</p> <code>None</code> <code>name</code> <code>str | None</code> <p>A unique name for the block to reference when adding text or embedding (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code>"},{"location":"reference/display-blocks/text/#simple-code-block","title":"Simple Code Block","text":""},{"location":"reference/display-blocks/text/#arakawa.Formula","title":"<code>Formula</code>","text":"<p>The formula block allows you easily to add LaTeX-formatted equations to your app, with an optional caption.</p> <p>Tip</p> <p>A brief intro into LaTeX formulas can be found here.</p> <p>Parameters:</p> Name Type Description Default <code>formula</code> <code>str</code> <p>A formula to embed, using LaTeX format (use raw strings)</p> required <code>caption</code> <code>str | None</code> <p>A caption to display below the Formula (optional)</p> <code>None</code> <code>name</code> <code>str | None</code> <p>A unique name for the block to reference when adding text or embedding (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code> <p>Note</p> <p>LaTeX commonly uses special characters, hence prefix your formulas with <code>r</code> to make them raw strings, e.g. <code>r\"\frac{1}{\\sqrt{x^2 + 1}}\"</code></p> <p>Under the hood we use MathJAX to render the equations in the browser and not a full TeX engine. This means that some of your TeX input may not be rendered correctly on our system - read the MathJAX documentation for more info.</p>"},{"location":"reference/display-blocks/text/#simple-latex-formula","title":"Simple LaTeX Formula","text":""},{"location":"reference/display-blocks/text/#arakawa.HTML","title":"<code>HTML</code>","text":"<p>The HTML block allows you to add raw HTML to your app,  allowing for highly customized components, such as your company's brand, logo, and more.</p> <p>Info</p> <p>The HTML block is sandboxed and cannot execute JavaScript by default.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str | dom_tag</code> <p>An HTML fragment to embed - can be a string or a dominate tag</p> required <code>name</code> <code>str | None</code> <p>A unique name for the block to reference when adding text or embedding (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code> <code>sandbox</code> <code>str | None</code> <p>A sandbox attribute. Defaults to \"allow-scripts\". \"allow-scripts\" is needed to resize iframe.</p> <code>'allow-scripts'</code>"},{"location":"reference/display-blocks/text/#simple-html-content","title":"Simple HTML Content","text":""},{"location":"reference/layout-blocks/compute/","title":"Compute","text":"<pre><code>ar.Compute(\n    subtitle=\"Subtitle\",\n    label=\"Label\",\n    method=\"POST\",\n    blocks=[\n        ar.TextBox(\"text\", required=True),\n        ar.NumberBox(\"number\", initial=100),\n    ],\n)\n</code></pre>"},{"location":"reference/layout-blocks/compute/#compute","title":"Compute","text":""},{"location":"reference/layout-blocks/compute/#arakawa.Compute","title":"<code>Compute</code>","text":"<p>Compute acts as a container that holds a list of ControlBlock objects to compose an HTML form.</p> <p>Parameters:</p> Name Type Description Default <code>*arg_blocks</code> <code>BlockOrPrimitive</code> <p>Compute to add to report.</p> <code>()</code> <code>blocks</code> <code>list[BlockOrPrimitive] | None</code> <p>Blocks to compose a form. Defaults to None.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>A name. Defaults to None.</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label. Defaults to None.</p> <code>None</code> <code>prompt</code> <code>str | None</code> <p>A prompt. Defaults to None.</p> <code>None</code> <code>subtitle</code> <code>str | None</code> <p>A subtitle. Defaults to None.</p> <code>None</code> <code>action</code> <code>str | None</code> <p>The form action. Defaults to \"\".</p> <code>''</code> <code>method</code> <code>MethodType</code> <p>The form method. Defaults to MethodType.GET.</p> <code>GET</code>"},{"location":"reference/layout-blocks/group/","title":"Groups","text":"<pre><code>ar.Group(ar.Text(\"\u2b05\ufe0f Left side\"), ar.Text(\"\u27a1\ufe0f Right side\"), columns=2)\n</code></pre> <pre><code>import altair as alt\nfrom vega_datasets import data\n\ndf = data.iris()\nplot = (\n    alt.Chart(df)\n    .mark_point()\n    .encode(x=\"petalLength:Q\", y=\"petalWidth:Q\", color=\"species:N\")\n)\n\nar.Group(ar.Plot(plot), ar.DataTable(df), columns=2)\n</code></pre> <pre><code>import altair as alt\nfrom vega_datasets import data\n\ndf = data.iris()\nplot = (\n    alt.Chart(df)\n    .mark_point()\n    .encode(x=\"petalLength:Q\", y=\"petalWidth:Q\", color=\"species:N\")\n)\n\n# You could also generate these in a loop/function\nmy_plots = [ar.Plot(plot), ar.DataTable(df)]\n\nar.Group(blocks=my_plots, columns=2)\n</code></pre>"},{"location":"reference/layout-blocks/group/#groups-and-grid-layouts","title":"Groups and Grid Layouts","text":""},{"location":"reference/layout-blocks/group/#arakawa.Group","title":"<code>Group</code>","text":"<p>If you pass a list of blocks (such as <code>Plot</code> and <code>Table</code>) to an app, they are -- by default -- laid out in a single column with a row per block.</p> <p>If you would like to customize the rows and columns, Arakawa provides a <code>Group</code> block which takes a list of blocks and a number of columns and lays them out in a grid.</p> <p>Tip</p> <p>As <code>Group</code> blocks are blocks themselves, they are composable, and you can create more custom layers of nested blocks, for instance nesting 2 rows in the left column of a 2 column layout</p> <p>Parameters:</p> Name Type Description Default <code>*arg_blocks</code> <code>BlockOrPrimitive</code> <p>Group to add to report</p> <code>()</code> <code>blocks</code> <code>list[BlockOrPrimitive] | None</code> <p>Allows providing the report blocks as a single list</p> <code>None</code> <code>name</code> <code>str | None</code> <p>A unique id for the blocks to aid querying (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code> <code>widths</code> <code>list[int | float] | None</code> <p>A list of numbers representing the proportion of vertical space given to each column (optional)</p> <code>None</code> <code>valign</code> <code>VAlign</code> <p>The vertical alignment of blocks in the Group (default = VAlign.TOP)</p> <code>TOP</code> <code>columns</code> <code>int</code> <p>Display the contained blocks, e.g. Plots, using n columns (default = 1), setting to 0 auto-wraps the columns</p> <code>1</code> <p>Note</p> <p>Group can be passed using either arg parameters or the <code>blocks</code> kwarg, e.g. <code>ar.Group(plot, table, columns=2)</code> or <code>ar.Group(blocks=[plot, table], columns=2)</code>.</p>"},{"location":"reference/layout-blocks/group/#simple-2-column-grid","title":"Simple 2 Column Grid","text":""},{"location":"reference/layout-blocks/group/#plot-and-datatable-in-a-2-column-grid","title":"Plot and DataTable in a 2 Column Grid","text":""},{"location":"reference/layout-blocks/group/#populating-a-grid-with-a-list-of-blocks","title":"Populating a Grid With a List of Blocks","text":"<p>If you're generating your plots programmatically or have a lot of plots, you can pass them into the Group block as a list, using the <code>blocks</code> parameter. We can rewrite the previous example as follows:</p>"},{"location":"reference/layout-blocks/page/","title":"Pages","text":"<pre><code>import altair as alt\nimport seaborn as sns\n\ntitanic = sns.load_dataset(\"titanic\")\n\npoints = (\n    alt.Chart(titanic)\n    .mark_point()\n    .encode(\n        x=\"age:Q\",\n        color=\"class:N\",\n        y=\"fare:Q\",\n    )\n    .interactive()\n    .properties(width=\"container\")\n)\n\nar.Blocks(\n    ar.Page(title=\"Titanic Dataset\", blocks=[\"### Dataset\", titanic]),\n    ar.Page(title=\"Titanic Plot\", blocks=[\"### Plot\", points]),\n)\n</code></pre>"},{"location":"reference/layout-blocks/page/#pages","title":"Pages","text":""},{"location":"reference/layout-blocks/page/#arakawa.Page","title":"<code>Page</code>","text":"<p>Apps on Arakawa can have multiple pages, which are presented to users as tabs at the top of your app. These can be used similarly to sheets in an Excel document.</p> <p>To add a page, use the <code>ar.Page</code> block at the top-level of your app, and give it a title with the <code>title</code> parameter.</p> <p>Info</p> <p>Pages cannot be nested, and can only exist at the root level of your <code>ar.App</code> object. If you're using pages, all other blocks must be contained inside a Page block.</p> <p>Note</p> <p>This is included for backwards-compatibility, and can be replaced by using Selects going forwards.</p> <p>Parameters:</p> Name Type Description Default <code>*arg_blocks</code> <code>BlockOrPrimitive</code> <p>Blocks to add to Page</p> <code>()</code> <code>blocks</code> <code>list[BlockOrPrimitive] | None</code> <p>Allows providing the report blocks as a single list</p> <code>None</code> <code>title</code> <code>str | None</code> <p>The page title (optional)</p> <code>None</code> <code>name</code> <code>str | None</code> <p>A unique id for the Page to aid querying (optional)</p> <code>None</code> <p>Tip</p> <p>Page can be passed using either arg parameters or the <code>blocks</code> kwarg, e.g. <code>ar.Page(group, select)</code> or <code>ar.Group(blocks=[group, select])</code></p>"},{"location":"reference/layout-blocks/page/#simple-pages","title":"Simple Pages","text":""},{"location":"reference/layout-blocks/select/","title":"Selects","text":"<pre><code>import seaborn as sns\nimport altair as alt\n\ncode = \"\"\"\ntitanic = sns.load_dataset(\"titanic\")\n\nreport = ar.Report(\n    \"# Titanic overview\",\n    ar.HTML(\n        '&lt;html&gt;&lt;img alt=\"No description has been provided for this image\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/RMS_Titanic_3.jpg/1599px-RMS_Titanic_3.jpg\" style=\"height:400px;display:flex;margin:auto\"/&gt;&lt;/html&gt;'\n    ),\n    ar.Select(\n        blocks=[\n            ar.Table(titanic.describe(), label=\"Data Description\"),\n            ar.DataTable(titanic, label=\"Whole Dataset\"),\n            ar.Code(code, label=\"Source code\"),\n        ]\n    ),\n)\n\napp.save(path=\"select.html\")\n\"\"\"\n\ntitanic = sns.load_dataset(\"titanic\")\n\nar.Blocks(\n    \"# Titanic overview\",\n    ar.HTML(\n        '&lt;html&gt;&lt;img alt=\"No description has been provided for this image\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/RMS_Titanic_3.jpg/1599px-RMS_Titanic_3.jpg\" style=\"height:400px;display:flex;margin:auto\"/&gt;&lt;/html&gt;'\n    ),\n    ar.Select(\n        blocks=[\n            ar.Table(titanic.describe(), label=\"Data Description\"),\n            ar.DataTable(titanic, label=\"Whole Dataset\"),\n            ar.Code(code, label=\"Source code\"),\n        ]\n    ),\n)\n</code></pre> <pre><code>import seaborn as sns\n\ncode = \"\"\"\ntitanic = sns.load_dataset(\"titanic\")\n\nreport = ar.Report(\n    \"# Titanic overview\",\n    ar.HTML(\n        '&lt;html&gt;&lt;img alt=\"No description has been provided for this image\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/RMS_Titanic_3.jpg/1599px-RMS_Titanic_3.jpg\" style=\"height:400px;display:flex;margin:auto\"/&gt;&lt;/html&gt;'\n    ),\n    ar.Select(\n        blocks=[\n            ar.Table(titanic.describe(), label=\"Data Description\"),\n            ar.DataTable(titanic, label=\"Whole Dataset\"),\n            ar.Code(code, label=\"Source code\"),\n        ]\n    ),\n)\n\nreport.save(path=\"select.html\")\n\"\"\"\n\ntitanic = sns.load_dataset(\"titanic\")\n\nar.Blocks(\n    \"# Titanic overview\",\n    ar.HTML(\n        '&lt;html&gt;&lt;img alt=\"No description has been provided for this image\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/RMS_Titanic_3.jpg/1599px-RMS_Titanic_3.jpg\" style=\"height:400px;display:flex;margin:auto\"/&gt;&lt;/html&gt;'\n    ),\n    ar.Select(\n        blocks=[\n            ar.Table(titanic.describe(), label=\"Data Description\"),\n            ar.DataTable(titanic, label=\"Whole Dataset\"),\n            ar.Code(code, label=\"Source code\"),\n        ],\n        type=ar.SelectType.DROPDOWN,\n    ),\n)\n</code></pre>"},{"location":"reference/layout-blocks/select/#selects-and-tabs","title":"Selects and Tabs","text":"<p>The <code>ar.Select</code> block has two modes:</p> <ul> <li>Tabs are used for less than 5 options - you can override this default by passing in the parameter <code>type=ar.SelectType.TABS</code></li> <li>Drop downs are used for 5 or more options - you can override this default by passing in the parameter <code>type=ar.SelectType.DROPDOWN</code>. In addition, a search bar will appear if the block contains more than 10 options.</li> </ul> <p>To set the option names, make sure each block contained inside your <code>ar.Select</code> has a <code>label</code>.</p>"},{"location":"reference/layout-blocks/select/#arakawa.Select","title":"<code>Select</code>","text":"<p>Selects act as a container that holds a list of nested Blocks objects, such as Tables, Plots, etc.. - but only one may be visible, or \"selected\", at once.</p> <p>The user can choose which nested object to view dynamically using either tabs or a dropdown.</p> <p>Note</p> <p>Select expects a list of Blocks, e.g. a Plot or Table, but also includes Select or Groups themselves, but if a Python object is passed, e.g. a Dataframe, Arakawa will attempt to convert it automatically.</p> <p>Parameters:</p> Name Type Description Default <code>*arg_blocks</code> <code>BlockOrPrimitive</code> <p>Page to add to report</p> <code>()</code> <code>blocks</code> <code>list[BlockOrPrimitive] | None</code> <p>Allows providing the report blocks as a single list</p> <code>None</code> <code>type</code> <code>SelectType</code> <p>An instance of SelectType that indicates if the select should use tabs or a dropdown (default: Tabs)</p> <code>TABS</code> <code>name</code> <code>str | None</code> <p>A unique id for the blocks to aid querying (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code> <p>Tip</p> <p>Select can be passed using either arg parameters or the <code>blocks</code> kwarg, e.g. <code>ar.Select(table, plot, type=ar.SelectType.TABS)</code> or <code>ar.Select(blocks=[table, plot])</code></p>"},{"location":"reference/layout-blocks/select/#simple-tabs","title":"Simple Tabs","text":""},{"location":"reference/layout-blocks/toggle/","title":"Toggle","text":"<pre><code>import seaborn as sns\n\ncode = \"\"\"\ntitanic = sns.load_dataset(\"titanic\")\n\nreport = ar.Report(\n    \"# Titanic overview\",\n    ar.HTML(\n        '&lt;html&gt;&lt;img alt=\"No description has been provided for this image\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/RMS_Titanic_3.jpg/1599px-RMS_Titanic_3.jpg\" style=\"height:400px;display:flex;margin:auto\"/&gt;&lt;/html&gt;'\n    ),\n    ar.Select(\n        blocks=[\n            ar.Table(titanic.describe(), label=\"Data Description\"),\n            ar.DataTable(titanic, label=\"Whole Dataset\"),\n            ar.Code(code, label=\"Source code\"),\n        ]\n    ),\n)\n\nreport.save(path=\"select.html\")\n\"\"\"\n\ntitanic = sns.load_dataset(\"titanic\")\n\nar.Blocks(\n    \"# Titanic overview\",\n    ar.HTML(\n        '&lt;html&gt;&lt;img alt=\"No description has been provided for this image\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/RMS_Titanic_3.jpg/1599px-RMS_Titanic_3.jpg\" style=\"height:400px;display:flex;margin:auto\"/&gt;&lt;/html&gt;'\n    ),\n    ar.Toggle(\n        blocks=[\n            ar.Table(titanic.describe(), label=\"Data Description\"),\n            ar.DataTable(titanic, label=\"Whole Dataset\"),\n            ar.Code(code, label=\"Source code\"),\n        ]\n    ),\n)\n</code></pre>"},{"location":"reference/layout-blocks/toggle/#toggle","title":"Toggle","text":""},{"location":"reference/layout-blocks/toggle/#arakawa.Toggle","title":"<code>Toggle</code>","text":"<p>Toggles act as a container that holds a list of nested Block objects, whose visibility can be toggled on or off by the report viewer</p> <p>Parameters:</p> Name Type Description Default <code>*arg_blocks</code> <code>BlockOrPrimitive</code> <p>Group to add to report</p> <code>()</code> <code>blocks</code> <code>list[BlockOrPrimitive] | None</code> <p>Allows providing the report blocks as a single list</p> <code>None</code> <code>name</code> <code>str | None</code> <p>A unique id for the blocks to aid querying (optional)</p> <code>None</code> <code>label</code> <code>str | None</code> <p>A label used when displaying the block (optional)</p> <code>None</code>"},{"location":"reference/layout-blocks/toggle/#simple-toggle","title":"Simple Toggle","text":""},{"location":"reports/jupyter-integration/","title":"Jupyter Integration","text":"<p>Arakawa has first-class Jupyter Notebook support. This includes Jupyter Lab, Jupyter Notebook, Google Colab, and Visual Studio Code with the Jupyter plugin.</p> <p>Let's see how Arakawa and Jupyter Notebook can build data-powered apps, all without disrupting your workflow.</p> <pre><code>import arakawa as ar\nimport altair as alt\nfrom vega_datasets import data\n</code></pre> <p>That's not bad, but it could be much better. Let's wrap our DataFrame in Arakawa's <code>ar.DataTable</code> block and see what happens.</p> <pre><code>df = data.iris()\nar.DataTable(df)\n</code></pre> <p>Our DataFrame is now interactive. We can explore it with filters, sorting, export options, and even run SQL queries against the data.</p> <pre><code>fig = (\n    alt.Chart(df)\n    .mark_point()\n    .encode(x=\"petalLength:Q\", y=\"petalWidth:Q\", color=\"species:N\")\n)\n</code></pre> <p>... and bring them both together with a <code>ar.Select</code> block.</p> <pre><code>ar.Select(\n    blocks =[\n        ar.Plot(fig, label=\"Plot\"),\n        ar.DataTable(df, label=\"Data\")\n    ]\n)\n</code></pre> <p>Now we have an interactive plot, and we can switch to that same interactive data explorer from earlier by clicking the \"Data\" tab.</p> <pre><code>ar.Group(\n    ar.BigNumber(\n        heading=\"Percentage points\",\n        value=\"84%\",\n        change=\"2%\",\n        is_upward_change=True,\n    ),\n    ar.BigNumber(\n        heading=\"Points\",\n        value=\"1234\",\n        change=\"200\",\n        is_upward_change=False,\n    ),\n    columns=2,\n)\n</code></pre>"},{"location":"reports/jupyter-integration/#enhancing-notebooks","title":"Enhancing Notebooks","text":"<p>Arakawa Blocks are useful and they can be embedded straight into your notebook.</p>"},{"location":"reports/jupyter-integration/#interactive-dataframes","title":"Interactive DataFrames","text":"<p>The notebook journey often begins by loading in a dataset and displaying it for a quick sanity check. Something like the following:</p>"},{"location":"reports/jupyter-integration/#adding-structure-with-tabs","title":"Adding Structure With Tabs","text":"<p>Notebooks don't have to be a flood of in/out cells that are viewed from top to bottom. We can add depth to our notebooks with tabs.</p> <p>Let's create a scatter plot with our dataset from earlier...</p>"},{"location":"reports/jupyter-integration/#add-even-more-blocks","title":"Add Even More Blocks","text":"<p>Enhance your data reports with Arakawa's Blocks, which includes the handy <code>ar.BigNumber</code> block.</p>"},{"location":"reports/jupyter-integration/#convert-notebooks-to-reports","title":"Convert Notebooks to Reports","text":"<p>Data analysis often begins in a Jupyter Notebook, and once complete, we need to share our insights.</p> <p>Some recipients may be comfortable with an <code>.ipynb</code> file, and in those instances, you could just send your notebook over and still benefit from Arakawa's enhancements.</p> <p>But in most cases, you will want to turn your notebook into something presentable and accessible. With Arakawa, all it takes is a single line of code.</p> <pre><code>view = ar.View.from_notebook()\n</code></pre>"},{"location":"reports/jupyter-integration/#opt-in-or-opt-out","title":"Opt-in or Opt-out","text":"<p>By default, notebook-to-report conversion will include all markdown and supported cell output. This is the easiest and quickest way to turn your notebook into an report. </p> <p>In this mode, you can explicitly exclude cells with the cell tag <code>ar-exclude</code>.</p> <p></p> <p>In some cases, it is preferable to only include cells of interest. This can be achieved by setting <code>opt_out</code> to <code>False</code>, e.g.:</p> <pre><code>blocks = ar.Blocks.from_notebook(opt_out=False)\n</code></pre> <p>In this mode, you can explicitly include supported cells with the cell tag <code>ar-include</code>.</p> <p></p>"},{"location":"reports/jupyter-integration/#display-input-code","title":"Display Input Code","text":"<p>You may want to display the input code for a particular cell in your report. Arakawa has you covered. You can include code cells with the cell tag <code>ar-show-code</code>.</p> <p></p>"},{"location":"reports/overview/","title":"Overview","text":"<p>Arakawa Reports are data-centric documents which you can generate using Python. You can think of them as replacements for sending a PDF or PowerPoint, and they can be exported as HTML files and sent over Slack or Email. Reports are often created programmatically from inside other platforms, such as a data pipelines (\"LightGBM training results v230\"), CI, or generated on a cadence (\"Monday's sales forecast\").</p> <p>Tip</p> <p>Generating a Report is somewhat similar to generating static-site generator for HTML, like <code>Hugo</code> or <code>Jekyll</code></p> <p>Arakawa Reports provide the fastest way to share with others, for instance:</p> <ul> <li>Export as a\u00a0standalone HTML file (with all it's assets inline) which you can share on Slack or Email</li> <li>Host on GitHub Pages or S3 for a public presentation</li> <li>Embed within your own internal applications</li> </ul> <pre><code>import altair as alt\nimport arakawa as ar\nfrom vega_datasets import data\n\ndf = data.iris()\n\nfig = (\n    alt.Chart(df)\n    .mark_point()\n    .encode(x=\"petalLength\", y=\"petalWidth\", color=\"species\")\n)\n\nview = ar.Blocks(\"# My report\", ar.Plot(fig), ar.DataTable(df))\n</code></pre>"},{"location":"reports/overview/#example","title":"Example","text":"<p>The example below builds upon the example in the previous section, comprised of a heading, figure, interactive figure, and interactive data table.</p> <p>Arakawa makes it simple to convert this into a Report, as per the examples below (see the API reference for further details).</p>"},{"location":"reports/overview/#saving-reports","title":"Saving Reports","text":"<p>Reports can be saved / exported as standalone files which can be shared without a server. All data and plots are encapsulated in a single HTML file, which provides a secure and low-barrier sharing method. Views can be exported as a standalone report using ar.save_report:</p> <pre><code># save as a static HTML-based report\nar.save_report(view, path=\"my_report.html\")\n# or\nar.Report(view, path=\"my_report.html\")\n</code></pre> <p>You can view the saved report, download it, open it locally, or send via email and Slack.</p>"},{"location":"reports/styling/","title":"Styling","text":"<p>Arakawa enables you to can change the font, background color and text alignment to match your brand guidelines or personal aesthetics. Simply override the default styling properties by passing in a <code>Formatting</code> object as follows:</p> <pre><code>import arakawa as ar\n\nview = ar.View(\"Test Message\")\n\nar.save_report(\n    view,\n    path=\"styling-python-api.html\",\n    formatting=ar.Formatting(\n        light_prose=False,\n        accent_color=\"orange\",\n        bg_color=\"#EEE\",\n        text_alignment=ar.TextAlignment.RIGHT,\n        font=ar.FontChoice.MONOSPACE,\n        width=ar.Width.MEDIUM,\n    )\n)\n</code></pre> <p>There are currently six styling properties supported:</p> <p>1. Light Prose</p> <p>Boolean which controls whether the text appears as light (good for dark mode), or dark (default).</p> <p>2. Accent Color</p> <p>Controls the color of certain UI elements e.g. page titles, selects, DataTable headings. Can be any of the 140 CSS colour names or an RGB hex code.</p> <p>3. Background Color</p> <p>Controls the background color - can be any of the 140 CSS colour names or an RGB hex code.</p> <p>4. Text Alignment</p> <p>Controls how the text is aligned - can be any of <code>JUSTIFY</code>, <code>LEFT</code> (default),   <code>RIGHT</code>, <code>CENTER</code>.</p> <p>5. Font</p> <p>Controls the font for the prose text - can be any of <code>DEFAULT</code>, <code>SANS</code>, <code>SERIF</code>, <code>MONOSPACE</code>.</p> <p>6. Width</p> <p>Controls the horizontal width - can be any of <code>NARROW</code>, <code>MEDIUM</code> (default), <code>FULL</code>.</p>"}]}